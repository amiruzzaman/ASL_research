---
import Layout from "../layouts/Layout.astro";
---

<Layout title="English to ASL">
  <div class="app">
    <div id="word-list" class="word-list">
      <span
        id="word-template"
        data-active="false"
        data-unknown="false"
        style="display: none;"
        class="word-chip"></span>
    </div>
    <div class="wrapper">
      <div id="canvas-parent" class="canvas-parent"></div>
    </div>
    <div class="input-wrapper">
      <input
        id="user-input"
        aria-label="Enter English Sentence"
        name="word-input"
        type="text"
        placeholder="Hello"
      />
      <button disabled id="submit">Play</button>
    </div>
  </div>
  <p>
    Translate English sentences to ASL signs. Enter the English sentence in the field above and
    click "Play". The ASL animation will cycle through each word. If a word is unknown, it will be
    marked red, and will be skipped.
  </p>
</Layout>

<style>
  .word-list {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--1);
  }

  .word-chip {
    border-radius: var(--4);
    padding: var(--1) var(--2);
    border: dashed 2px var(--accent-50);
    background-color: var(--accent-100);
  }

  .word-chip[data-active="true"] {
    border-style: solid;
    border-color: var(--primary-200);
    background-color: var(--primary-100);
  }

  .word-list > .word-chip[data-unknown="true"] {
    border-color: red;
  }

  .app {
    display: flex;
    align-items: center;
    justify-content: stretch;
    flex-direction: column;
    gap: var(--2);
  }

  @keyframes pulse {
    0% {
      background-color: var(--secondary-100);
    }
    50% {
      background-color: var(--secondary-50);
    }
    100% {
      background-color: var(--secondary-100);
    }
  }

  .wrapper {
    box-sizing: border-box;
  }

  .canvas-parent {
    width: 100%;
    height: 100%;
  }

  .wrapper:not(:has(canvas)) {
    animation: pulse 2.5s linear infinite;
  }

  .wrapper:has(canvas) {
    /* Hard-coded dark background since in light theme it's hard to see the animation */
    background-color: #14191f;
  }

  .input-wrapper {
    display: flex;
    flex-direction: row;
    gap: var(--1);
  }

  .wrapper {
    padding: var(--2);
    width: 100%;
    height: 40vh;
    border-radius: var(--2);
  }
</style>

<script>
  import {
    parseAndCreateRequest,
    renderAsl,
    prepareCanvas,
    type TranslationRequest,
  } from "../lib/asl-render";

  const buildWordUi = (
    template: HTMLElement,
    target: HTMLElement,
    req: TranslationRequest,
  ): HTMLElement[] => {
    return req.words.map((word: string, i) => {
      const wordId = `anim-word-${i}`;
      const wordUi = template.cloneNode() as HTMLElement;
      wordUi.id = wordId;
      wordUi.style.display = "unset";
      wordUi.textContent = word;
      wordUi.dataset.unknown = (!(word in req.dataMap)).toString();
      target.appendChild(wordUi);
      return wordUi as HTMLElement;
    });
  };

  const setWordActive = (word: number, active: boolean) => {
    const elem = document.getElementById(`anim-word-${word}`);
    if (elem) {
      elem.dataset.active = active.toString();
    }
  };

  const ready = () => {
    const submitButton = document.getElementById("submit")!;
    const userInputBox = document.getElementById("user-input")! as HTMLInputElement;
    const wordUiTemplate = document.getElementById("word-template")!;
    const wordList = document.getElementById("word-list")!;
    const canvasParent = document.getElementById("canvas-parent")!;

    const ctx = prepareCanvas(canvasParent);
    let cancelInitAnim = false;
    parseAndCreateRequest("hello").then((req) => {
      if (!cancelInitAnim) {
        renderAsl(ctx, req);
      }
    });

    submitButton.onclick = async () => {
      cancelInitAnim = true;
      const input = userInputBox.value.trim();
      if (input.length === 0) return;

      submitButton.setAttribute("disabled", "true");
      submitButton.textContent = "Fetching Words";

      const req = await parseAndCreateRequest(input);
      submitButton.textContent = "Preparing";
      buildWordUi(wordUiTemplate, wordList, req);
      let lastWord = 0;
      renderAsl(ctx, req, (i) => {
        setWordActive(lastWord, false);
        setWordActive(i, true);
        lastWord = i;
      });
      userInputBox.parentNode?.removeChild?.(userInputBox);
      submitButton.removeAttribute("disabled");
      submitButton.textContent = "Restart";
      submitButton.onclick = () => {
        window.location.reload();
      };
    };
    submitButton.removeAttribute("disabled");
    userInputBox.focus();
    document.onkeydown = (e) => {
      if (e.key === "Enter") {
        submitButton.click();
      }
    };
  };

  window.onload = ready;
</script>
