---
import Layout from "../layouts/Layout.astro";
import ASLCanvas from "../components/ASLCanvas.astro";
import Pane from "../components/Pane.astro";
---

<Layout class="main" title="English to ASL">
  <div class="app">
    <div id="word-list" class="word-list">
      <span
        id="word-template"
        data-active="false"
        data-unknown="false"
        style="display: none;"
        class="word-chip"></span>
    </div>
    <Pane id="pane" class="wrapper">
      <ASLCanvas id="canvas" />
    </Pane>
    <div class="input-wrapper">
      <button id="mic">Use Audio</button>
      <input
        id="user-input"
        aria-label="Enter English Sentence"
        name="word-input"
        type="text"
        placeholder="Hello"
      />
      <button disabled id="submit">Play</button>
    </div>
  </div>
  <p>
    Translate English sentences to ASL signs. Enter the English sentence in the field above and
    click "Play". The ASL animation will cycle through each word. If a word is unknown, it will be
    marked red, and will be skipped. Words can be recorded for this page using the <a href="/record"
      >Record ASL</a
    > page.
  </p>
</Layout>

<style>
  .main {
    display: flex;
    flex-direction: column;
    gap: var(--2);
  }

  .word-list {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--1);
  }

  .word-chip {
    border-radius: var(--4);
    padding: var(--1) var(--2);
    border: dashed 2px var(--accent-50);
    background-color: var(--accent-100);
  }

  .word-chip[data-active="true"] {
    border-style: solid;
    border-color: var(--primary-200);
    background-color: var(--primary-100);
  }

  .word-list > .word-chip[data-unknown="true"] {
    border-color: red;
  }

  .app {
    display: flex;
    align-items: center;
    justify-content: stretch;
    flex-direction: column;
    gap: var(--2);
  }

  .input-wrapper {
    display: flex;
    flex-direction: row;
    gap: var(--1);
  }

  .wrapper {
    width: 100%;
    height: 40vh;
  }
</style>

<script>
  import { usePane } from "../components/Pane.astro";
  import {
    createRequest,
    renderAsl,
    prepareCanvas,
    type TranslationRequest,
  } from "../lib/asl-render";

  const buildWordUi = (
    template: HTMLElement,
    target: HTMLElement,
    req: TranslationRequest,
  ): HTMLElement[] => {
    return req.words.map((word: string, i) => {
      const wordId = `anim-word-${i}`;
      const wordUi = template.cloneNode() as HTMLElement;
      wordUi.id = wordId;
      wordUi.style.display = "unset";
      wordUi.textContent = word;
      wordUi.dataset.unknown = (!(word in req.dataMap)).toString();
      target.appendChild(wordUi);
      return wordUi as HTMLElement;
    });
  };

  const setWordActive = (word: number, active: boolean) => {
    const elem = document.getElementById(`anim-word-${word}`);
    if (elem) {
      elem.dataset.active = active.toString();
    }
  };

  const ready = () => {
    const submitButton = document.getElementById("submit")!;
    const userInputBox = document.getElementById("user-input")! as HTMLInputElement;
    const wordUiTemplate = document.getElementById("word-template")!;
    const wordList = document.getElementById("word-list")!;
    const canvas = document.getElementById("canvas")! as HTMLCanvasElement;
    const pane = usePane(document.getElementById("pane")! as HTMLDivElement);
    const recordButton = document.getElementById("mic")! as HTMLButtonElement;

    if (!("webkitSpeechRecognition" in window)) {
      recordButton.style.display = "none";
    } else {
      // @ts-expect-error Checked Above
      const recognition = new webkitSpeechRecognition();
      recognition.lang = "en-US";
      let transcript = "";

      recognition.onresult = (e: {
        resultIndex: number;
        results: { 0: { transcript: string }; isFinal: boolean }[];
      }) => {
        for (let i = e.resultIndex; i < e.results.length; ++i) {
          if (e.results[i].isFinal) {
            transcript += e.results[i][0].transcript;
            console.debug(transcript);
          }
        }
      };

      recognition.onend = () => {
        userInputBox.value = transcript;
        transcript = "";
        recordButton.innerText = "Use Audio";
        recordButton.disabled = false;
      };

      recordButton.onclick = async () => {
        recordButton.innerText = "Recording";
        recordButton.disabled = true;
        recognition.start();
      };
    }

    const ctx = prepareCanvas(canvas);
    submitButton.onclick = async () => {
      const input = userInputBox.value.trim();
      if (input.length === 0) return;

      recordButton.style.display = "none";
      submitButton.style.display = "none";
      userInputBox.style.display = "none";
      pane.setLoading(true);

      const req = await createRequest(input, (progress) => {
        pane.setLoadingText(`Fetching Words (${progress.currentWord}/${progress.totalWords})`);
      });
      pane.setLoadingText("Preparing");
      buildWordUi(wordUiTemplate, wordList, req);
      let lastWord = 0;
      renderAsl(ctx, req, (i) => {
        setWordActive(lastWord, false);
        setWordActive(i, true);
        lastWord = i;
      });
      pane.setLoading(false);
      submitButton.removeAttribute("disabled");
      submitButton.textContent = "Restart";
      submitButton.style.display = "";
      submitButton.onclick = () => {
        window.location.reload();
      };
    };
    submitButton.removeAttribute("disabled");
    userInputBox.focus();
    document.onkeydown = (e) => {
      if (e.key === "Enter") {
        submitButton.click();
      }
    };
  };

  window.onload = ready;
</script>
