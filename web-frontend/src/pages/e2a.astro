---
import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
---

<Layout title="English to ASL">
  <div class="app container">
    <div class="wrapper">
      <div id="canvas-parent" class="canvas-parent"></div>
    </div>
    <div class="input-wrapper">
      <input
        id="user-input"
        aria-label="Enter English Sentence"
        name="word-input"
        type="text"
        placeholder="Hello"
      />
      <Button disabled id="submit">Play</Button>
    </div>
  </div>
  <p>
    Translate English sentences to ASL signs. Enter the English sentence in the field above and
    click "Play". The ASL animation will cycle through each word. If a word is unknown, it will be
    marked red, and will be skipped.
  </p>
</Layout>

<style>
  .app {
    display: flex;
    padding: var(--2);
    align-items: center;
    justify-content: stretch;
    flex-direction: column;
    gap: var(--2);
  }

  @keyframes pulse {
    0% {
      background-color: var(--secondary-100);
    }
    50% {
      background-color: var(--secondary-50);
    }
    100% {
      background-color: var(--secondary-100);
    }
  }

  .canvas-parent {
    width: 100%;
    height: 100%;
  }

  .wrapper:not(:has(canvas)) {
    animation: pulse 2.5s linear infinite;
  }

  .wrapper:has(canvas) {
    border: solid 2px var(--secondary);
  }

  .wrapper {
    padding: var(--2);
    width: 100%;
    height: 40vh;
    border-radius: var(--2);
  }
</style>

<script>
  import {
    parseAndCreateRequest,
    renderAsl,
    prepareCanvas,
    type TranslationRequest,
  } from "../lib/asl-render";

  const buildWordUi = (
    template: HTMLElement,
    target: HTMLElement,
    req: TranslationRequest,
  ): HTMLElement[] => {
    return req.words.map((word: string, i) => {
      const wordId = `anim-word-${i}`;
      const wordUi = template.cloneNode() as HTMLElement;
      wordUi.id = wordId;
      wordUi.style.display = "unset";
      wordUi.textContent = word;
      wordUi.dataset.known = (word in req.dataMap).toString();
      target.appendChild(wordUi);
      return wordUi as HTMLElement;
    });
  };

  const setWordActive = (word: number, active: boolean) => {
    const elem = document.getElementById(`anim-word-${word}`);
    if (elem) {
      elem.dataset.active = active.toString();
    }
  };

  const ready = () => {
    const submitButton = document.getElementById("submit")!;
    const userInputBox = document.getElementById("user-input")! as HTMLInputElement;
    const wordUiTemplate = document.getElementById("word-template")!;
    const wordShowingList = document.getElementById("word-showing")!;
    const canvasParent = document.getElementById("canvas-parent")!;

    const ctx = prepareCanvas(canvasParent);
    let cancelInitAnim = false;
    parseAndCreateRequest("hello").then((req) => {
      if (!cancelInitAnim) {
        renderAsl(ctx, req);
      }
    });

    submitButton.onclick = async () => {
      cancelInitAnim = true;
      const input = userInputBox.value.trim();
      if (input.length === 0) return;

      submitButton.setAttribute("disabled", "true");
      submitButton.textContent = "Fetching Words";

      const req = await parseAndCreateRequest(input);
      submitButton.textContent = "Preparing";
      buildWordUi(wordUiTemplate, wordShowingList, req);
      let lastWord = 0;
      renderAsl(ctx, req, (i) => {
        setWordActive(lastWord, false);
        setWordActive(i, true);
        lastWord = i;
      });
      submitButton.textContent = "Playing";
    };
    submitButton.removeAttribute("disabled");
    userInputBox.focus();
    document.onkeydown = (e) => {
      if (e.key === "Enter") {
        submitButton.click();
      }
    };
  };

  window.onload = ready;
</script>
