---
import Layout from "../layouts/Layout.astro";
import Title from "../components/Title.astro";
---

<Layout title="English 2 ASL">
  <div>
    <Title>
      American Sign Language Agent
    </Title>
  </div>
  <div id="canvas-parent" class="flex justify-center my-24 h-96">
    <div id="canvas-placeholder" class="hidden only:block rounded w-96 h-full bg-gray-200"></div>
  </div>
  <div class="my-8">
    <span id="word-template" style="display: none" data-known="true" data-active="false"
      class="rounded-xl px-4 py-2 border-dashed data-[known=false]:bg-red-200 data-[known=true]:border-solid border-2 border-gray-200 bg-gray-100 data-[active=true]:bg-blue-300 data-[active=true]:border-blue-300 transition"></span>
    <div class="flex flex-wrap flex-row gap-4" id="word-showing"></div>
  </div>
  <div class="flex flex-col md:flex-row gap-2">
    <label class="grow flex text-2xl flex-col gap-2">
      Enter English Phrase
      <input id="user-input" class="rounded p-2 border-solid border-blue-300 border-2 grow md:grow-0" type="text"
        placeholder="Hello" autocomplete="off" />
    </label>
    <button id="submit" disabled class="rounded text-2xl text-white py-2 px-8 bg-blue-600 disabled:bg-blue-300">
      Go
    </button>
  </div>
</Layout>

<script>

import { parseAndCreateRequest, renderAsl, prepareCanvas, type TranslationRequest } from "../lib/asl-render";

const buildWordUi = (
  template: HTMLElement,
  target: HTMLElement, 
  req: TranslationRequest,
): HTMLElement[] => {
  return req.words.map((word: string, i) => {
    const wordId = `anim-word-${i}`;
    const wordUi = template.cloneNode() as HTMLElement;
    wordUi.id = wordId;
    wordUi.style.display = "unset";
    wordUi.textContent = word;
    wordUi.dataset.known = (word in req.dataMap).toString();
    target.appendChild(wordUi);
    return wordUi as HTMLElement;
  });
};

const setWordActive = (word: number, active: boolean) => {
  const elem = document.getElementById(`anim-word-${word}`);
  if (elem) {
    elem.dataset.active = active.toString();
  }
};

const ready = () => {
  const submitButton = document.getElementById("submit")!;
  const userInputBox = document.getElementById(
    "user-input",
  )! as HTMLInputElement;
  const wordUiTemplate = document.getElementById("word-template")!;
  const wordShowingList = document.getElementById("word-showing")!;
  const canvasParent = document.getElementById("canvas-parent")!;

  const ctx = prepareCanvas(canvasParent);

  submitButton.onclick = () => {
    const input = userInputBox.value.trim();
    if (input.length === 0) return;

    submitButton.setAttribute("disabled", "true");
    submitButton.textContent = "Fetching Words";

    parseAndCreateRequest(input).then((req) => {
      submitButton.textContent = "Preparing";
      buildWordUi(wordUiTemplate, wordShowingList, req);
      let lastWord = 0;
      renderAsl(ctx, req, (i) => {
        setWordActive(lastWord, false); 
        setWordActive(i, true);
        lastWord = i;
      });
      submitButton.textContent = "Playing";
    });
  };
  submitButton.removeAttribute("disabled");
  userInputBox.focus();
  document.onkeydown = (e) => {
    if (e.key === "Enter") {
      submitButton.click();
    }
  };
};

window.onload = ready;
</script>

